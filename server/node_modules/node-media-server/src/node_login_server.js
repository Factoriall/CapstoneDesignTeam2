const mysql = require('mysql');
const express = require('express');
const bodyParser = require('body-parser');
var app = express();
const Logger = require('./node_core_logger');
var url = require('url');

//db_config에서 설정, 이는 현 디렉토리/config/db_config.json으로 설정
//이는 개인정보를 담고 있으므로 db_config.json은 gitignore를 통해 git에 track되면 안됨
var db_config  = require('./config/db_config.json');
var connection = mysql.createConnection({
    host     : db_config.host,
    user     : db_config.user,
    password : db_config.password,
    database : db_config.database
});

//로그인 및 회원가입 구현 파트
class NodeLoginServer {
    constructor(config) {
        this.port = config.login.port 
        app.use(bodyParser.json());
        app.use(bodyParser.urlencoded({extended: true}));
        connection.connect();
		
		// user의 최종 통과 여부를 android에게 요청 받아 확인 후 반환하는 부분
		// 해당 user가 없다면 에러와 함께 204, 'incorrect user'를 반환
		// 해당 user가 있다면 DB에서 user를 검색해 결과(pass/fail)와 함께 200을 반환
		app.post('/user/pass', function(req, res){
			var resultCode = 404;
			var message = 'unknown error';
			
			var userName = req.body.userName;

			var sql = 'select pass from user where userName=?';

			connection.query(sql, userName, function(err, result){
				// unknown sql error
				if(err){
					console.log(err);
					res.json({
						'code': resultCode,
						'message': message,
					});
				}
				else{
					// invaild user
					if(result.length == 0){
						res.json({
							'code': 204,
							'message': 'incorrect user',
						});
					}
					else{
						// return pass
						if(result[0].pass == 'pass'){
							console.log('pass');
							res.json({
								'code': 200, 
								'message': userName + ' check',
								'pass': 'pass'
							});	
						}
						// return fail
						else{
							console.log('fail');
							res.json({
								'code': 200,
								'message': userName + ' check',
								'pass': 'fail'
							});
						}
					}
				}
			});
		});

		// android에게 result 요청을 받았을 때 DB를 검색해서 result를 반환하는 부분. success/failure
		app.post('/user/result', function (req, res){
			var resultCode = 404;
			var message = 'unknown error';
			var finalResult = 'test result';
			
			// req.body: android에서 전송한 정보
			var userName = req.body.userName;

			var resultCheck = 'select result from user where userName=?';
			
			// userName으로 DB에 검색
			connection.query(resultCheck, userName, function(err, result){
				console.log(result);
				if(err){
					console.log(err);
					res.json({
						'code': resultCode,
						'message': message,
						'result': finalResult
					});
				}
				else{
					// invalid user
					if(result.length === 0){
						res.json({
							'code': 204,
							'message': 'incorrect user',
							'result': 'error'
						});
					}
					// user match
					else{

						// result not evaluated
						if(result[0].result == 'nothing'){
							console.log('result = nothing');
							resultCode = 204;
							message = 'not evaluated';

							// send response to android
							res.json({
								'code' : resultCode,
								'message' : message,
								'result' : 'nothing'
							});
						}

						// result evaluated
						else{
							console.log('result = ' + result[0].result);
							finalResult = result[0].result;
							
							// send response(result) to android
							res.json({
							 	'code' : 200,
								'message' : 'evaluated',
								'result' : finalResult
							});
							
							// initialize result for next evaluation
							connection.query('update user set result="nothing" where userName=?', userName, function(err, result){
								if(err){
									console.log(err);
								}
								else{
									console.log('initialize complete');
								}
							});
		
						}	
					}
				}
			});
		});


		// android에서 login 요청 보낼 시 실행되는 코드
		// email, password가 일치하지 않는다면 200 코드와 에러 메시지를 반환
		// 로그인 성공시 204 코드와 userName을 반환
        app.post('/user/login', function (req, res) {
			//여기서 sql 문의 경우 database에 어떤 스키마로 저장했는지에 따라 
            console.log(req.body);
            //body의 정보를 알아야 함, android에서 주는 이름과 일치해야 됨
            var userEmail = req.body.userEmail;
            var userPwd = req.body.userPwd;
            var sql = 'select * from user where userEmail = ?';
			
			// sql: select * from user where userEmail=(android sent userEmail);
            connection.query(sql, userEmail, function (err, result) {
                var resultCode = 404;
                var message = 'unknown error';

                if (err) {
                    console.log(err);
                } else {
					// invalid email
                    if (result.length === 0) {
                        resultCode = 204;
                        message = 'invalid email';
                    } 
					
					// invalid password
					else if (userPwd !== result[0].userPwd) {
                        resultCode = 204;
                        message = 'invalid password';
                    }
					
					// login success
					else {
                        resultCode = 200;
                        message = 'login success ' + result[0].userName;
						console.log('login success: ' + result[0].userName);
                    }
                }
				
				// return login result to android
                res.json({
                    'code': resultCode,
                    'message': message,
					'userName': result[0].userName
                });
            });
        });

		// signup 요청시 실행되는 부분
		// userEmail, userName 중복 여부를 확인하고, 중복시 204 코드와 함께 에러 메시지를 반환
		// 중복 없으면 DB에 데이터를 삽입하고 userName을 반환
		app.post('/user/join', function(req, res){
		    console.log(req.body);	    
		    var userEmail = req.body.userEmail;
		    var userName = req.body.userName;
			var userPwd = req.body.userPwd;
			var sql = 'select * from user where userEmail = ?';
			connection.query(sql, userEmail, function(err, result){
				console.log(result);
				if(result.length !== 0){
						res.json({
						"code": 204,
						"message": 'duplicated email'
					});
				}
				else{
					sql = 'select * from user where userName = ?';
					connection.query(sql, userName, function(err, result){
						if(result.length !== 0){
							res.json({
								"code": 204,
								"message": 'duplicated name'
							});
						}
						else{
							sql = 'insert into user (userEmail, userPwd, userName) values (?, ?, ?)';
							connection.query(sql, [userEmail, userPwd, userName], function(err, result){
								res.json({
									"code": 200,
									"message": 'signin success: ' + userName
								});
							});
						}
					});
				}
		    });
		});
	} 

    run() {
        app.listen(this.port, () => {
            Logger.log(`Node Login Http Server started on port: ${this.port}`);
        });
    }
}

module.exports = NodeLoginServer;
